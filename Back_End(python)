from flask import Flask, request, jsonify
from flask_cors import CORS
import random
import time
import numpy as np

app = Flask(__name__)
CORS(app)

# ---------- Helper Functions ----------
def Random_x():
    return random.randint(1, 100)

def Random_y():
    return random.randint(1, 100)

def Shelter_distribution(users):
    points = np.array([(u["address_x"], u["address_y"]) for u in users])
    n = len(points)

    k = max(1, int(n / 50))  # 至少 1 个 shelter

    points = np.array(points)
    n = len(points)

    # Step 1: 随机选择第一个 shelter
    centroids = [points[random.randint(0, n - 1)]]

    # Step 2: 选择剩余 shelter
    for _ in range(1, k):
        distances = np.array([min(np.linalg.norm(p - c) ** 2 for c in centroids) for p in points])
        probabilities = distances / distances.sum()
        chosen_idx = np.random.choice(range(n), p=probabilities)
        centroids.append(points[chosen_idx])

    # Step 3: K-means 更新 shelter 位置
    for _ in range(10):
        clusters = [[] for _ in range(k)]
        for p in points:
            distances = [np.linalg.norm(p - c) for c in centroids]
            nearest = distances.index(min(distances))
            clusters[nearest].append(p)
        new_centroids = []
        for group in clusters:
            if group:
                avg_x = sum(p[0] for p in group) / len(group)
                avg_y = sum(p[1] for p in group) / len(group)
                new_centroids.append((avg_x, avg_y))
            else:
                new_centroids.append(random.choice(points))
        centroids = new_centroids

    return centroids

# ---------- Database ----------
class Database:
    UID = 1
    users = []
    ShID = 1
    shelters = []
    RID = 1
    repository = []
    repository_address_x = Random_x()
    repository_address_y = Random_y()
    TID = 1
    trucks = []

# 初始化 100 个随机用户
for i in range(500):
    user = {
        "UID": Database.UID,
        "name": f"User{Database.UID}",
        "phoneNumber": "N/A",
        "email": "N/A",
        "address_x": Random_x(),
        "address_y": Random_y(),
        "requestLimit": 5,
        "last_request_time": 0,
    }
    Database.users.append(user)
    Database.UID += 1

# 初始化 5 个随机 shelter
"""for i in range(5):
    shelter = {
        "ShID": Database.ShID,
        "num_of_shelters": 1,
        "address_x": Random_x(),
        "address_y": Random_y(),
        "address": f"Shelter {Database.ShID}",
        "supply": 50,
        "demand": 0
    }
    Database.shelters.append(shelter)
    Database.ShID += 1"""

# 初始化仓库
def init_repository():
    Database.repository.append({
        "RID": Database.RID,
        "repository_name": "Main Repo",
        "address_repository": "Central",
        "address_x": Database.repository_address_x,
        "address_y": Database.repository_address_y,
        "supply": {"general": 100000}
    })
    Database.RID += 1

init_repository()

# ---------- API Routes ----------

# 获取用户
@app.route("/api/users")
def api_users():
    return jsonify(Database.users)

# 获取 shelter
@app.route("/api/shelters")
def api_shelters():
    return jsonify(Database.shelters)

# 获取仓库
@app.route("/api/repositories")
def api_repositories():
    return jsonify(Database.repository)

# 添加用户
@app.route("/add_user", methods=["POST"])
def add_user():
    name = request.form.get("name")
    phoneNumber = request.form.get("phoneNumber")
    email = request.form.get("email")
    address_x = Random_x()
    address_y = Random_y()

    user = {
        "UID": Database.UID,
        "name": name,
        "phoneNumber": phoneNumber,
        "email": email,
        "address_x": address_x,
        "address_y": address_y,
        "last_request_time": 0,
    }
    Database.users.append(user)
    Database.UID += 1
    return jsonify({"message": f"User {name} added", "user": user})

# 添加 shelter
@app.route("/add_shelter", methods=["POST"])
def add_shelter():
    centroids = Shelter_distribution(Database.users)
    added_shelters = []
    for center in centroids:
        shelter = {
            "ShID": Database.ShID,
            "num_of_shelters": 1,
            "address_x": int(center[0]),
            "address_y": int(center[1]),
            "address": f"Shelter {Database.ShID}",
            "supply": 50,
            "demand": 0
        }
        Database.shelters.append(shelter)
        added_shelters.append(shelter)
        Database.ShID += 1
    return jsonify({"message": f"{len(added_shelters)} shelters added", "shelters": added_shelters})


def init_shelters():
    centroids = Shelter_distribution(Database.users)
    for center in centroids:
        shelter = {
            "ShID": Database.ShID,
            "num_of_shelters": 1,
            "address_x": int(center[0]),
            "address_y": int(center[1]),
            "address": f"Shelter {Database.ShID}",
            "supply": 50,
            "demand": 0
        }
        Database.shelters.append(shelter)
        Database.ShID += 1



# add repositorys
@app.route("/add_repository", methods=["POST"])
def add_repository():
    repository_name = request.form.get("repository_name")
    address_repository = request.form.get("address_repository")
    repository = {
        "RID": Database.RID,
        "repository_name": repository_name,
        "address_repository": address_repository,
        "address_x": Database.repository_address_x,
        "address_y": Database.repository_address_y,
        "supply": {"general": 100000}
    }
    Database.repository.append(repository)
    Database.RID += 1
    return jsonify({"message": f"Repository {repository_name} added", "repository": repository})

# add truck
@app.route("/add_truck", methods=["POST"])
def add_truck():
    num_of_trucks = int(request.form.get("num_of_trucks", 1))
    end_point = request.form.get("end_point", "unknown")
    truck_capacity = int(request.form.get("truck_capacity", 25))

    trucks_added = []
    for _ in range(num_of_trucks):
        truck = {
            "TID": Database.TID,
            "starting_point_x": Database.repository_address_x,
            "starting_point_y": Database.repository_address_y,
            "end_point": end_point,
            "truck_capacity": truck_capacity,
            "status": "idle",
        }
        Database.trucks.append(truck)
        trucks_added.append(truck)
        Database.TID += 1

    return jsonify({"message": f"{num_of_trucks} truck(s) added", "trucks": trucks_added})

# 用户请求 supply
@app.route("/request_supply", methods=["POST"])
def request_supply():
    UID = int(request.form.get("UID"))
    ShID = int(request.form.get("ShID"))

    user = next((u for u in Database.users if u["UID"] == UID), None)
    shelter = next((s for s in Database.shelters if s["ShID"] == ShID), None)

    if not user or not shelter:
        return "<h2>User or Shelter not found!</h2>"

    if shelter["supply"] <= 0:
        return "<h2>Shelter has no supply left!</h2>"

    shelter["supply"] -= 1
    shelter["demand"] += 1
    user["last_request_time"] = time.time()

    return f"<h2>Supply granted! Shelter {ShID} has {shelter['supply']} supply left. User {UID} requested at {user['last_request_time']}</h2>"

# 手动派车请求
@app.route("/request_truck", methods=["POST"])
def request_truck():
    ShID = int(request.form.get("ShID"))
    truck_capacity = int(request.form.get("truck_capacity", 25))

    shelter = next((s for s in Database.shelters if s["ShID"] == ShID), None)
    if not shelter:
        return "<h2>Shelter not found!</h2>"

    truck = next((t for t in Database.trucks if t["status"] == "idle"), None)
    if not truck:
        return "<h2>No idle trucks available!</h2>"

    repo = next((r for r in Database.repository), None)
    if not repo:
        return "<h2>No repository found!</h2>"

    move_amount = min(truck_capacity, 50)
    shelter["supply"] += move_amount

    truck["status"] = "dispatched"
    truck["to_shelter"] = ShID
    truck["truck_supply"] = move_amount

    return jsonify({
        "message": f"Truck {truck['TID']} dispatched to Shelter {ShID}",
        "supply_moved": move_amount,
        "shelter_supply_now": shelter["supply"]
    })

# 自动派车
@app.route("/auto_dispatch_request", methods=["POST"])
def auto_dispatch_request():
    truck_capacity = int(request.form.get("truck_capacity", 25))
    supply_type = request.form.get("supply_type", "general")
    dispatched_trucks = []

    for shelter in Database.shelters:
        threshold = 50
        demand = max(0, shelter["demand"] + threshold - shelter["supply"])

        while demand > 0:
            truck = next((t for t in Database.trucks if t["status"] == "idle"), None)
            if not truck:
                break
            repo = next((r for r in Database.repository if r["supply"].get(supply_type,0) > 0), None)
            if not repo:
                break

            move_amount = min(truck_capacity, repo["supply"][supply_type], demand)

            repo["supply"][supply_type] -= move_amount
            truck["status"] = "dispatched"
            truck["to_shelter"] = shelter["ShID"]
            truck["truck_supply"] = move_amount
            truck["supply_type"] = supply_type

            complete_truck_delivery(truck, shelter, move_amount)
            dispatched_trucks.append(truck)
            demand = max(0, shelter["demand"] + threshold - shelter["supply"])

    return jsonify({
        "message": f"Auto dispatch complete! {len(dispatched_trucks)} trucks dispatched for {supply_type}.",
        "trucks": dispatched_trucks
    })

def complete_truck_delivery(truck, shelter, move_amount):
    shelter["supply"] += move_amount
    shelter["demand"] = max(0, shelter["demand"] - move_amount)
    truck["status"] = "idle"
    truck["truck_supply"] = 0
    truck.pop("to_shelter", None)

# ---------- Run App ----------
if __name__ == "__main__":
    init_shelters()
    app.run(debug=True)
