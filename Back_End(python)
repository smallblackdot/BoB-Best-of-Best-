from flask import Flask, request, jsonify
from flask_cors import CORS
import random
import time

app = Flask(__name__)
CORS(app)

def Random_x():
    return random.randint(1,100)

def Random_y():
    return random.randint(1,100)

# Simple "database"
class Database:
    UID = 1
    users = []
    ShID = 1
    shelters = []
    demands = {}
    RID = 1 #repository ID
    repository = []
    repository_address_x = Random_x()
    repository_address_y = Random_y()
    TID = 1
    truck = []

# 初始化 100 个随机用户，替代原来的 add_user() 调用
for i in range(100):
    user = {
        "UID": Database.UID,
        "name": f"User{Database.UID}",
        "phoneNumber": "N/A",
        "email": "N/A",
        "address_x": Random_x(),
        "address_y": Random_y(),
        "requestLimit": 5,
        "last_request_time": 0,
    }
    Database.users.append(user)
    Database.UID += 1

# 返回所有灾民（用户）数据，JSON 格式
@app.route("/api/users")
def api_users():
    return jsonify(Database.users)

# 返回所有 shelter 数据，JSON 格式
@app.route("/api/shelters")
def api_shelters():
    return jsonify(Database.shelters)

# Add user route
@app.route("/add_user", methods=["POST"])
def add_user():
    name = request.form.get("name")
    phoneNumber = request.form.get("phoneNumber")
    email = request.form.get("email")
    address_x = Random_x()
    address_y = Random_y()
    request_limit = 5
    last_time_requst = None

    user = {
        "UID": Database.UID,
        "name": name,
        "phoneNumber": phoneNumber,
        "email": email,
        "address_x": address_x,
        "address_y": address_y,
        "requestLimit": request_limit,
        "last_time_requst": 0,
    }
    Database.users.append(user)
    Database.UID += 1
    return f"<h2>User {name} added with UID = {user['UID']}</h2>"

# Add shelter route
@app.route("/add_shelter", methods=["POST"])
def add_shelter():
    num_of_shelters = request.form.get("num_of_shelters")
    address_shelter = request.form.get("address_shelter")
    shelter_supply = 50
    address_x = Random_x()
    address_y = Random_y()

    shelter = {
        "ShID": Database.ShID,
        "num_of_shelters": num_of_shelters,
        "address_x": address_x,
        "address_y": address_y,
        "address": address_shelter,
        "supply": shelter_supply
    }
    Database.shelters.append(shelter)
    Database.demands[shelter["ShID"]] = 0 
    Database.ShID += 1
    return f"<h2>Shelter {shelter['ShID']} added at {address_shelter}</h2>"

@app.route("/add_repository", methods=["POST"])
def add_repository():
    repository_name = request.form.get("repository_name")
    address_repository = request.form.get("address_repository")
    repository_supply = 100000

    repository = {
        "repository_name": repository_name,
        "address_repository": address_repository,
        "address_x": Database.repository_address_x,
        "address_y": Database.repository_address_y,
    }
    Database.repository.append(repository)
    return f"<h2>Repository {Database.RID} added at {address_repository}</h2>"

# Add truck route
@app.route("/add_truck", methods=["POST"])
def add_truck():
    num_of_trucks = int(request.form.get("num_of_trucks", 1))
    end_point = request.form.get("end_point", "unknown")
    truck_capacity = int(request.form.get("truck_capacity", 25))

    trucks_added = []
    for _ in range(num_of_trucks):
        truck = {
            "TID": Database.TID,
            "strating_point_x": Database.repository_address_x,
            "strating_point_y": Database.repository_address_y,
            "end_point": end_point,
            "truck_capacity": truck_capacity,
            "status": "idle",   # idle / dispatched / delivered
        }
        Database.trucks.append(truck)
        trucks_added.append(truck)
        Database.TID += 1

    return jsonify({"message": f"{num_of_trucks} truck(s) added", "trucks": trucks_added})


# 内部工具函数（不要写成路由）
def add_supply_to(shelter, supply_num):
    shelter["supply"] += supply_num


# 手动派车请求
@app.route("/request_truck", methods=["POST"])
def request_truck():
    ShID = int(request.form.get("ShID"))
    truck_capacity = int(request.form.get("truck_capacity", 25))

    # 找 shelter
    shelter = next((s for s in Database.shelters if s["ShID"] == ShID), None)
    if not shelter:
        return "<h2>Shelter not found!</h2>"

    # 找空闲的 truck
    truck = next((t for t in Database.trucks if t["status"] == "idle"), None)
    if not truck:
        return "<h2>No idle trucks available!</h2>"

    # 从 repository 运送物资
    repo = next((r for r in Database.repository), None)
    if not repo:
        return "<h2>No repository found!</h2>"

    move_amount = min(truck_capacity, 50)  # 假设一次最多带50
    add_supply_to(shelter, move_amount)

    truck["status"] = "dispatched"
    truck["to_shelter"] = ShID
    truck["truck_supply"] = move_amount

    return jsonify({
        "message": f"Truck {truck['TID']} dispatched to Shelter {ShID}",
        "supply_moved": move_amount,
        "shelter_supply_now": shelter["supply"]
    })

@app.route("/auto_dispatch_request", methods=["POST"])
def auto_dispatch_request():
    truck_capacity = int(request.form.get("truck_capacity", 25))
    supply_type = request.form.get("supply_type", "general")

    dispatched_trucks = []

    for shelter in Database.shelters:
        threshold = 15
        demand = max(0, threshold - shelter["supply"])

        while demand > 0:
            repo = next((r for r in Database.repository if r.get("supply", 0) > 0), None)
            if not repo:
                return "<h2>No repositories have enough supply!</h2>"

            move_amount = min(truck_capacity, repo["supply"], demand)

            truck = {
                "TID": Database.TID,
                "from_repository": repo.get("RID", 1),
                "to_shelter": shelter["ShID"],
                "truck_supply": move_amount,
                "supply_type": supply_type
            }
            Database.truck.append(truck)
            Database.TID += 1

            repo["supply"] -= move_amount
            shelter["supply"] += move_amount

            dispatched_trucks.append(truck)

            demand = max(0, threshold - shelter["supply"])

    return jsonify({
        "message": f"Auto dispatch complete! {len(dispatched_trucks)} trucks dispatched for {supply_type}.",
        "trucks": dispatched_trucks
    })


# Request supply route
@app.route("/request_supply", methods=["POST"])
def request_supply():
    UID = int(request.form.get("UID"))
    ShID = int(request.form.get("ShID"))

    # Find user
    user = next((u for u in Database.users if u["UID"] == UID), None)
    shelter = next((s for s in Database.shelters if s["ShID"] == ShID), None)

    if not user or not shelter:
        return "<h2>User or Shelter not found!</h2>"

    now = time.time()
    if user.get("last_request_time") and now - user["last_request_time"] < 30:
        wait_time = 30 - (now - user["last_request_time"])
        return f"<h2>User {UID} must wait {int(wait_time)} more seconds before requesting again.</h2>"

    if user["requestLimit"] <= 0:
        return "<h2>User has no requests left!</h2>"
    if shelter["supply"] <= 0:
        return "<h2>Shelter has no supply left!</h2>"

    user["requestLimit"] -= 1
    shelter["supply"] -= 1 
    Database.demands[ShID] += 1   # 增加需求
    user["last_request_time"] = now

    return f"<h2>Supply granted! User {UID} now has {user['requestLimit']} requests left. Shelter {ShID} has {shelter['supply']} supply left. The time between the user asked for supply is {user["last_time_request"]}</h2>"

for i in range(5):
    shelter = {
        "ShID": Database.ShID,
        "num_of_shelters": 1,
        "address_x": Random_x(),
        "address_y": Random_y(),
        "address": f"Shelter {Database.ShID}",
        "supply": 50,
    }
    Database.shelters.append(shelter)
    Database.ShID += 1

if __name__ == "__main__":
    app.run(debug=True)
