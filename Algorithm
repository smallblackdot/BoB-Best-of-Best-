import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

# ----- Step 1: Generate people randomly -----
np.random.seed(42)
num_people = 100
grid_size = 50
people = np.random.randint(0, grid_size, size=(num_people, 2))

# ----- Step 2: Remove outliers -----
def remove_outliers(points, threshold=0.1):
    """Remove top threshold% farthest points from centroid."""
    centroid = np.mean(points, axis=0)
    dists = np.linalg.norm(points - centroid, axis=1)
    cutoff = np.percentile(dists, 100 - threshold*100)
    mask = dists <= cutoff
    return points[mask]

people_clean = remove_outliers(people, threshold=0.1)  # remove top 10%

# ----- Step 3: K-means clustering for shelters -----
num_shelters = max(1, len(people_clean) // 50)
kmeans = KMeans(n_clusters=num_shelters, n_init=10, random_state=42).fit(people_clean)
labels = kmeans.labels_

# ----- Step 4: Compute geometric median for each cluster -----
def geometric_median(points, eps=1e-5):
    """Weiszfeldâ€™s algorithm for geometric median."""
    y = np.mean(points, axis=0)
    while True:
        D = np.linalg.norm(points - y, axis=1)
        nonzeros = (D != 0)
        if not np.any(nonzeros):
            return y
        W = 1 / np.maximum(D, eps)
        T = np.sum(W[:, None] * points, axis=0) / np.sum(W)
        if np.linalg.norm(y - T) < eps:
            return T
        y = T

shelters = []
for i in range(num_shelters):
    cluster_points = people_clean[labels == i]
    shelters.append(geometric_median(cluster_points))

shelters = np.array(shelters)

# ----- Step 5: Visualization -----
plt.figure(figsize=(6,6))
plt.scatter(people[:,0], people[:,1], c='red', label="People", alpha=0.6)
plt.scatter(people_clean[:,0], people_clean[:,1], c='blue', label="Used People", alpha=0.6)
plt.scatter(shelters[:,0], shelters[:,1], c='green', s=200, marker='X', label="Shelters")
plt.xlim(0, grid_size)
plt.ylim(0, grid_size)
plt.legend()
plt.grid(True)
plt.show()
