import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# ===== Step 1: Input people coordinates =====
# Replace this with your actual list of (x, y) coordinates
# Example: people = np.array([[10, 20], [30, 40], ...])
people = np.array([
    [12, 34], [25, 10], [40, 45], [5, 8], [20, 22], 
    [18, 40], [30, 35], [7, 15], [48, 49], [2, 3]
    # ... add all 100 coords here
])

# ===== Step 2: Remove outliers =====
def remove_outliers(points, threshold=0.1):
    """Remove top threshold% farthest points from centroid."""
    centroid = np.mean(points, axis=0)
    dists = np.linalg.norm(points - centroid, axis=1)
    cutoff = np.percentile(dists, 100 - threshold*100)  # e.g. 90th percentile
    mask = dists <= cutoff
    return points[mask], points[~mask]

people_clean, outliers = remove_outliers(people, threshold=0.1)  # remove top 10%

# ===== Step 3: Decide number of shelters =====
num_shelters = max(1, len(people_clean) // 50)

# ===== Step 4: Cluster people and find shelters =====
kmeans = KMeans(n_clusters=num_shelters, n_init=10, random_state=42).fit(people_clean)
labels = kmeans.labels_

def geometric_median(points, eps=1e-5):
    """Weiszfeldâ€™s algorithm for geometric median."""
    y = np.mean(points, axis=0)
    while True:
        D = np.linalg.norm(points - y, axis=1)
        nonzeros = (D != 0)
        if not np.any(nonzeros):
            return y
        W = 1 / np.maximum(D, eps)
        T = np.sum(W[:, None] * points, axis=0) / np.sum(W)
        if np.linalg.norm(y - T) < eps:
            return T
        y = T

shelters = []
for i in range(num_shelters):
    cluster_points = people_clean[labels == i]
    shelters.append(geometric_median(cluster_points))

shelters = np.array(shelters)

# ===== Step 5: Visualization =====
plt.figure(figsize=(6,6))
plt.scatter(people[:,0], people[:,1], c='red', label="People", alpha=0.6)
plt.scatter(people_clean[:,0], people_clean[:,1], c='blue', label="Used People", alpha=0.6)
plt.scatter(outliers[:,0], outliers[:,1], c='gray', marker="o", label="Outliers", alpha=0.6)
plt.scatter(shelters[:,0], shelters[:,1], c='green', s=200, marker='X', label="Shelters")
plt.xlim(0, 50)
plt.ylim(0, 50)
plt.legend()
plt.grid(True)
plt.show()

# ===== Output results =====
print("Shelter locations (x, y):")
print(shelters)
